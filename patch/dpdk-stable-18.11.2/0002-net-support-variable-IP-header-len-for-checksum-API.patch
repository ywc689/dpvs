From 86d8695113517403c59497dc2f43a333fa44316b Mon Sep 17 00:00:00 2001
From: ywc689 <ywc689@163.com>
Date: Fri, 28 Jun 2019 16:27:08 +0800
Subject: [PATCH 2/3] net: support variable IP header len for checksum API.

IPv4 checksum APIs use fixe IP header length, it will failed if there is
any IP option. Now calculating header length by "ihl" field, so that we
can support options.
---
 lib/librte_net/rte_ip.h | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/lib/librte_net/rte_ip.h b/lib/librte_net/rte_ip.h
index f9b9090..635bdcc 100644
--- a/lib/librte_net/rte_ip.h
+++ b/lib/librte_net/rte_ip.h
@@ -252,7 +252,7 @@ struct ipv4_hdr {
 rte_ipv4_cksum(const struct ipv4_hdr *ipv4_hdr)
 {
 	uint16_t cksum;
-	cksum = rte_raw_cksum(ipv4_hdr, sizeof(struct ipv4_hdr));
+	cksum = rte_raw_cksum(ipv4_hdr, (ipv4_hdr->version_ihl & 0xf) * 4);
 	return (cksum == 0xffff) ? cksum : (uint16_t)~cksum;
 }
 
@@ -294,7 +294,7 @@ struct ipv4_hdr {
 	} else {
 		psd_hdr.len = rte_cpu_to_be_16(
 			(uint16_t)(rte_be_to_cpu_16(ipv4_hdr->total_length)
-				- sizeof(struct ipv4_hdr)));
+				- (ipv4_hdr->version_ihl & 0xf) * 4));
 	}
 	return rte_raw_cksum(&psd_hdr, sizeof(psd_hdr));
 }
@@ -317,13 +317,14 @@ struct ipv4_hdr {
 rte_ipv4_udptcp_cksum(const struct ipv4_hdr *ipv4_hdr, const void *l4_hdr)
 {
 	uint32_t cksum;
-	uint32_t l3_len, l4_len;
+	uint32_t l3_len, l4_len, iphlen;
 
 	l3_len = rte_be_to_cpu_16(ipv4_hdr->total_length);
-	if (l3_len < sizeof(struct ipv4_hdr))
-		return 0;
+	iphlen = (ipv4_hdr->version_ihl & 0xf) * 4;
 
-	l4_len = l3_len - sizeof(struct ipv4_hdr);
+	if (l3_len < iphlen)
+		return 0;
+	l4_len = l3_len - iphlen;
 
 	cksum = rte_raw_cksum(l4_hdr, l4_len);
 	cksum += rte_ipv4_phdr_cksum(ipv4_hdr, 0);
-- 
1.8.3.1

