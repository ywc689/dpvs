// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MatchSpec match spec
//
// swagger:model MatchSpec
type MatchSpec struct {

	// dest
	Dest *AddrRange `json:"Dest,omitempty"`

	// in if name
	InIfName string `json:"InIfName,omitempty"`

	// out if name
	OutIfName string `json:"OutIfName,omitempty"`

	// src
	Src *AddrRange `json:"Src,omitempty"`
}

// Validate validates this match spec
func (m *MatchSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchSpec) validateDest(formats strfmt.Registry) error {
	if swag.IsZero(m.Dest) { // not required
		return nil
	}

	if m.Dest != nil {
		if err := m.Dest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Dest")
			}
			return err
		}
	}

	return nil
}

func (m *MatchSpec) validateSrc(formats strfmt.Registry) error {
	if swag.IsZero(m.Src) { // not required
		return nil
	}

	if m.Src != nil {
		if err := m.Src.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Src")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Src")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this match spec based on the context it is used
func (m *MatchSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSrc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchSpec) contextValidateDest(ctx context.Context, formats strfmt.Registry) error {

	if m.Dest != nil {
		if err := m.Dest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Dest")
			}
			return err
		}
	}

	return nil
}

func (m *MatchSpec) contextValidateSrc(ctx context.Context, formats strfmt.Registry) error {

	if m.Src != nil {
		if err := m.Src.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Src")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Src")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchSpec) UnmarshalBinary(b []byte) error {
	var res MatchSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
