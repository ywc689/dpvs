// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DestCheckSpec dest check spec
//
// swagger:model DestCheckSpec
type DestCheckSpec string

func NewDestCheckSpec(value DestCheckSpec) *DestCheckSpec {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DestCheckSpec.
func (m DestCheckSpec) Pointer() *DestCheckSpec {
	return &m
}

const (

	// DestCheckSpecPassive captures enum value "passive"
	DestCheckSpecPassive DestCheckSpec = "passive"

	// DestCheckSpecTCP captures enum value "tcp"
	DestCheckSpecTCP DestCheckSpec = "tcp"

	// DestCheckSpecUDP captures enum value "udp"
	DestCheckSpecUDP DestCheckSpec = "udp"

	// DestCheckSpecPing captures enum value "ping"
	DestCheckSpecPing DestCheckSpec = "ping"

	// DestCheckSpecUdpping captures enum value "udpping"
	DestCheckSpecUdpping DestCheckSpec = "udpping"

	// DestCheckSpecHTTP captures enum value "http"
	DestCheckSpecHTTP DestCheckSpec = "http"
)

// for schema
var destCheckSpecEnum []interface{}

func init() {
	var res []DestCheckSpec
	if err := json.Unmarshal([]byte(`["passive","tcp","udp","ping","udpping","http"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		destCheckSpecEnum = append(destCheckSpecEnum, v)
	}
}

func (m DestCheckSpec) validateDestCheckSpecEnum(path, location string, value DestCheckSpec) error {
	if err := validate.EnumCase(path, location, value, destCheckSpecEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dest check spec
func (m DestCheckSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDestCheckSpecEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dest check spec based on context it is used
func (m DestCheckSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
