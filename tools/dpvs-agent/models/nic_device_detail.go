// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NicDeviceDetail nic device detail
//
// swagger:model NicDeviceDetail
type NicDeviceDetail struct {

	// flags
	Flags uint16 `json:"Flags,omitempty"`

	// ID
	ID uint16 `json:"ID,omitempty"`

	// m t u
	MTU uint16 `json:"MTU,omitempty"`

	// addr
	Addr string `json:"addr,omitempty"`

	// autoneg
	// Enum: [fixed-nego auto-nego]
	Autoneg string `json:"autoneg,omitempty"`

	// duplex
	// Enum: [half-duplex full-duplex]
	Duplex string `json:"duplex,omitempty"`

	// n rx q
	NRxQ uint8 `json:"nRxQ,omitempty"`

	// n tx q
	NTxQ uint8 `json:"nTxQ,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// socket ID
	SocketID uint8 `json:"socketID,omitempty"`

	// speed
	Speed uint32 `json:"speed,omitempty"`

	// status
	// Enum: [UP DOWN]
	Status string `json:"status,omitempty"`
}

// Validate validates this nic device detail
func (m *NicDeviceDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoneg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuplex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nicDeviceDetailTypeAutonegPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fixed-nego","auto-nego"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nicDeviceDetailTypeAutonegPropEnum = append(nicDeviceDetailTypeAutonegPropEnum, v)
	}
}

const (

	// NicDeviceDetailAutonegFixedDashNego captures enum value "fixed-nego"
	NicDeviceDetailAutonegFixedDashNego string = "fixed-nego"

	// NicDeviceDetailAutonegAutoDashNego captures enum value "auto-nego"
	NicDeviceDetailAutonegAutoDashNego string = "auto-nego"
)

// prop value enum
func (m *NicDeviceDetail) validateAutonegEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nicDeviceDetailTypeAutonegPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NicDeviceDetail) validateAutoneg(formats strfmt.Registry) error {
	if swag.IsZero(m.Autoneg) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutonegEnum("autoneg", "body", m.Autoneg); err != nil {
		return err
	}

	return nil
}

var nicDeviceDetailTypeDuplexPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["half-duplex","full-duplex"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nicDeviceDetailTypeDuplexPropEnum = append(nicDeviceDetailTypeDuplexPropEnum, v)
	}
}

const (

	// NicDeviceDetailDuplexHalfDashDuplex captures enum value "half-duplex"
	NicDeviceDetailDuplexHalfDashDuplex string = "half-duplex"

	// NicDeviceDetailDuplexFullDashDuplex captures enum value "full-duplex"
	NicDeviceDetailDuplexFullDashDuplex string = "full-duplex"
)

// prop value enum
func (m *NicDeviceDetail) validateDuplexEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nicDeviceDetailTypeDuplexPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NicDeviceDetail) validateDuplex(formats strfmt.Registry) error {
	if swag.IsZero(m.Duplex) { // not required
		return nil
	}

	// value enum
	if err := m.validateDuplexEnum("duplex", "body", m.Duplex); err != nil {
		return err
	}

	return nil
}

var nicDeviceDetailTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP","DOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nicDeviceDetailTypeStatusPropEnum = append(nicDeviceDetailTypeStatusPropEnum, v)
	}
}

const (

	// NicDeviceDetailStatusUP captures enum value "UP"
	NicDeviceDetailStatusUP string = "UP"

	// NicDeviceDetailStatusDOWN captures enum value "DOWN"
	NicDeviceDetailStatusDOWN string = "DOWN"
)

// prop value enum
func (m *NicDeviceDetail) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nicDeviceDetailTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NicDeviceDetail) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nic device detail based on context it is used
func (m *NicDeviceDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NicDeviceDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NicDeviceDetail) UnmarshalBinary(b []byte) error {
	var res NicDeviceDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
