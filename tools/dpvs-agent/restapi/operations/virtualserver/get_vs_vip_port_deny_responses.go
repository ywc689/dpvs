// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetVsVipPortDenyOKCode is the HTTP code returned for type GetVsVipPortDenyOK
const GetVsVipPortDenyOKCode int = 200

/*
GetVsVipPortDenyOK Success

swagger:response getVsVipPortDenyOK
*/
type GetVsVipPortDenyOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetVsVipPortDenyOK creates GetVsVipPortDenyOK with default headers values
func NewGetVsVipPortDenyOK() *GetVsVipPortDenyOK {

	return &GetVsVipPortDenyOK{}
}

// WithPayload adds the payload to the get vs vip port deny o k response
func (o *GetVsVipPortDenyOK) WithPayload(payload string) *GetVsVipPortDenyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get vs vip port deny o k response
func (o *GetVsVipPortDenyOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVsVipPortDenyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetVsVipPortDenyNotFoundCode is the HTTP code returned for type GetVsVipPortDenyNotFound
const GetVsVipPortDenyNotFoundCode int = 404

/*
GetVsVipPortDenyNotFound Service not found

swagger:response getVsVipPortDenyNotFound
*/
type GetVsVipPortDenyNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetVsVipPortDenyNotFound creates GetVsVipPortDenyNotFound with default headers values
func NewGetVsVipPortDenyNotFound() *GetVsVipPortDenyNotFound {

	return &GetVsVipPortDenyNotFound{}
}

// WithPayload adds the payload to the get vs vip port deny not found response
func (o *GetVsVipPortDenyNotFound) WithPayload(payload string) *GetVsVipPortDenyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get vs vip port deny not found response
func (o *GetVsVipPortDenyNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVsVipPortDenyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
