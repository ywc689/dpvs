// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutVsVipPortDenyHandlerFunc turns a function with the right signature into a put vs vip port deny handler
type PutVsVipPortDenyHandlerFunc func(PutVsVipPortDenyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutVsVipPortDenyHandlerFunc) Handle(params PutVsVipPortDenyParams) middleware.Responder {
	return fn(params)
}

// PutVsVipPortDenyHandler interface for that can handle valid put vs vip port deny params
type PutVsVipPortDenyHandler interface {
	Handle(PutVsVipPortDenyParams) middleware.Responder
}

// NewPutVsVipPortDeny creates a new http.Handler for the put vs vip port deny operation
func NewPutVsVipPortDeny(ctx *middleware.Context, handler PutVsVipPortDenyHandler) *PutVsVipPortDeny {
	return &PutVsVipPortDeny{Context: ctx, Handler: handler}
}

/*
	PutVsVipPortDeny swagger:route PUT /vs/{VipPort}/deny virtualserver putVsVipPortDeny

Add a set of ip from black list to vip:port:proto
*/
type PutVsVipPortDeny struct {
	Context *middleware.Context
	Handler PutVsVipPortDenyHandler
}

func (o *PutVsVipPortDeny) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutVsVipPortDenyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
