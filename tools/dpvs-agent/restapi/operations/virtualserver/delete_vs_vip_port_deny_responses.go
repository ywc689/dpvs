// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// DeleteVsVipPortDenyOKCode is the HTTP code returned for type DeleteVsVipPortDenyOK
const DeleteVsVipPortDenyOKCode int = 200

/*
DeleteVsVipPortDenyOK Success

swagger:response deleteVsVipPortDenyOK
*/
type DeleteVsVipPortDenyOK struct {
}

// NewDeleteVsVipPortDenyOK creates DeleteVsVipPortDenyOK with default headers values
func NewDeleteVsVipPortDenyOK() *DeleteVsVipPortDenyOK {

	return &DeleteVsVipPortDenyOK{}
}

// WriteResponse to the client
func (o *DeleteVsVipPortDenyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteVsVipPortDenyNotFoundCode is the HTTP code returned for type DeleteVsVipPortDenyNotFound
const DeleteVsVipPortDenyNotFoundCode int = 404

/*
DeleteVsVipPortDenyNotFound Service not found

swagger:response deleteVsVipPortDenyNotFound
*/
type DeleteVsVipPortDenyNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteVsVipPortDenyNotFound creates DeleteVsVipPortDenyNotFound with default headers values
func NewDeleteVsVipPortDenyNotFound() *DeleteVsVipPortDenyNotFound {

	return &DeleteVsVipPortDenyNotFound{}
}

// WithPayload adds the payload to the delete vs vip port deny not found response
func (o *DeleteVsVipPortDenyNotFound) WithPayload(payload string) *DeleteVsVipPortDenyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port deny not found response
func (o *DeleteVsVipPortDenyNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortDenyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortDenyInvalidFrontendCode is the HTTP code returned for type DeleteVsVipPortDenyInvalidFrontend
const DeleteVsVipPortDenyInvalidFrontendCode int = 460

/*
DeleteVsVipPortDenyInvalidFrontend Invalid frontend in service configuration

swagger:response deleteVsVipPortDenyInvalidFrontend
*/
type DeleteVsVipPortDenyInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortDenyInvalidFrontend creates DeleteVsVipPortDenyInvalidFrontend with default headers values
func NewDeleteVsVipPortDenyInvalidFrontend() *DeleteVsVipPortDenyInvalidFrontend {

	return &DeleteVsVipPortDenyInvalidFrontend{}
}

// WithPayload adds the payload to the delete vs vip port deny invalid frontend response
func (o *DeleteVsVipPortDenyInvalidFrontend) WithPayload(payload models.Error) *DeleteVsVipPortDenyInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port deny invalid frontend response
func (o *DeleteVsVipPortDenyInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortDenyInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortDenyInvalidBackendCode is the HTTP code returned for type DeleteVsVipPortDenyInvalidBackend
const DeleteVsVipPortDenyInvalidBackendCode int = 461

/*
DeleteVsVipPortDenyInvalidBackend Invalid backend in service configuration

swagger:response deleteVsVipPortDenyInvalidBackend
*/
type DeleteVsVipPortDenyInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortDenyInvalidBackend creates DeleteVsVipPortDenyInvalidBackend with default headers values
func NewDeleteVsVipPortDenyInvalidBackend() *DeleteVsVipPortDenyInvalidBackend {

	return &DeleteVsVipPortDenyInvalidBackend{}
}

// WithPayload adds the payload to the delete vs vip port deny invalid backend response
func (o *DeleteVsVipPortDenyInvalidBackend) WithPayload(payload models.Error) *DeleteVsVipPortDenyInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port deny invalid backend response
func (o *DeleteVsVipPortDenyInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortDenyInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortDenyFailureCode is the HTTP code returned for type DeleteVsVipPortDenyFailure
const DeleteVsVipPortDenyFailureCode int = 500

/*
DeleteVsVipPortDenyFailure Service deletion failed

swagger:response deleteVsVipPortDenyFailure
*/
type DeleteVsVipPortDenyFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortDenyFailure creates DeleteVsVipPortDenyFailure with default headers values
func NewDeleteVsVipPortDenyFailure() *DeleteVsVipPortDenyFailure {

	return &DeleteVsVipPortDenyFailure{}
}

// WithPayload adds the payload to the delete vs vip port deny failure response
func (o *DeleteVsVipPortDenyFailure) WithPayload(payload models.Error) *DeleteVsVipPortDenyFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port deny failure response
func (o *DeleteVsVipPortDenyFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortDenyFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
