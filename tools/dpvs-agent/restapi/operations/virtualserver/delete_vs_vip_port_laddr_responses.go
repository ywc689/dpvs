// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// DeleteVsVipPortLaddrOKCode is the HTTP code returned for type DeleteVsVipPortLaddrOK
const DeleteVsVipPortLaddrOKCode int = 200

/*
DeleteVsVipPortLaddrOK Success

swagger:response deleteVsVipPortLaddrOK
*/
type DeleteVsVipPortLaddrOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteVsVipPortLaddrOK creates DeleteVsVipPortLaddrOK with default headers values
func NewDeleteVsVipPortLaddrOK() *DeleteVsVipPortLaddrOK {

	return &DeleteVsVipPortLaddrOK{}
}

// WithPayload adds the payload to the delete vs vip port laddr o k response
func (o *DeleteVsVipPortLaddrOK) WithPayload(payload string) *DeleteVsVipPortLaddrOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port laddr o k response
func (o *DeleteVsVipPortLaddrOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortLaddrOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortLaddrInvalidFrontendCode is the HTTP code returned for type DeleteVsVipPortLaddrInvalidFrontend
const DeleteVsVipPortLaddrInvalidFrontendCode int = 460

/*
DeleteVsVipPortLaddrInvalidFrontend Invalid frontend in service configuration

swagger:response deleteVsVipPortLaddrInvalidFrontend
*/
type DeleteVsVipPortLaddrInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortLaddrInvalidFrontend creates DeleteVsVipPortLaddrInvalidFrontend with default headers values
func NewDeleteVsVipPortLaddrInvalidFrontend() *DeleteVsVipPortLaddrInvalidFrontend {

	return &DeleteVsVipPortLaddrInvalidFrontend{}
}

// WithPayload adds the payload to the delete vs vip port laddr invalid frontend response
func (o *DeleteVsVipPortLaddrInvalidFrontend) WithPayload(payload models.Error) *DeleteVsVipPortLaddrInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port laddr invalid frontend response
func (o *DeleteVsVipPortLaddrInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortLaddrInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortLaddrInvalidBackendCode is the HTTP code returned for type DeleteVsVipPortLaddrInvalidBackend
const DeleteVsVipPortLaddrInvalidBackendCode int = 461

/*
DeleteVsVipPortLaddrInvalidBackend Invalid backend in service configuration

swagger:response deleteVsVipPortLaddrInvalidBackend
*/
type DeleteVsVipPortLaddrInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortLaddrInvalidBackend creates DeleteVsVipPortLaddrInvalidBackend with default headers values
func NewDeleteVsVipPortLaddrInvalidBackend() *DeleteVsVipPortLaddrInvalidBackend {

	return &DeleteVsVipPortLaddrInvalidBackend{}
}

// WithPayload adds the payload to the delete vs vip port laddr invalid backend response
func (o *DeleteVsVipPortLaddrInvalidBackend) WithPayload(payload models.Error) *DeleteVsVipPortLaddrInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port laddr invalid backend response
func (o *DeleteVsVipPortLaddrInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortLaddrInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortLaddrFailureCode is the HTTP code returned for type DeleteVsVipPortLaddrFailure
const DeleteVsVipPortLaddrFailureCode int = 500

/*
DeleteVsVipPortLaddrFailure Error while creating virtual server

swagger:response deleteVsVipPortLaddrFailure
*/
type DeleteVsVipPortLaddrFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortLaddrFailure creates DeleteVsVipPortLaddrFailure with default headers values
func NewDeleteVsVipPortLaddrFailure() *DeleteVsVipPortLaddrFailure {

	return &DeleteVsVipPortLaddrFailure{}
}

// WithPayload adds the payload to the delete vs vip port laddr failure response
func (o *DeleteVsVipPortLaddrFailure) WithPayload(payload models.Error) *DeleteVsVipPortLaddrFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port laddr failure response
func (o *DeleteVsVipPortLaddrFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortLaddrFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
