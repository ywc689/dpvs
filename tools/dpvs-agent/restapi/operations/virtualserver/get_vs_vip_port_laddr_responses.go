// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// GetVsVipPortLaddrOKCode is the HTTP code returned for type GetVsVipPortLaddrOK
const GetVsVipPortLaddrOKCode int = 200

/*
GetVsVipPortLaddrOK Success

swagger:response getVsVipPortLaddrOK
*/
type GetVsVipPortLaddrOK struct {

	/*
	  In: Body
	*/
	Payload *models.LocalAddressExpandList `json:"body,omitempty"`
}

// NewGetVsVipPortLaddrOK creates GetVsVipPortLaddrOK with default headers values
func NewGetVsVipPortLaddrOK() *GetVsVipPortLaddrOK {

	return &GetVsVipPortLaddrOK{}
}

// WithPayload adds the payload to the get vs vip port laddr o k response
func (o *GetVsVipPortLaddrOK) WithPayload(payload *models.LocalAddressExpandList) *GetVsVipPortLaddrOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get vs vip port laddr o k response
func (o *GetVsVipPortLaddrOK) SetPayload(payload *models.LocalAddressExpandList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVsVipPortLaddrOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVsVipPortLaddrNotFoundCode is the HTTP code returned for type GetVsVipPortLaddrNotFound
const GetVsVipPortLaddrNotFoundCode int = 404

/*
GetVsVipPortLaddrNotFound Service not found

swagger:response getVsVipPortLaddrNotFound
*/
type GetVsVipPortLaddrNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetVsVipPortLaddrNotFound creates GetVsVipPortLaddrNotFound with default headers values
func NewGetVsVipPortLaddrNotFound() *GetVsVipPortLaddrNotFound {

	return &GetVsVipPortLaddrNotFound{}
}

// WithPayload adds the payload to the get vs vip port laddr not found response
func (o *GetVsVipPortLaddrNotFound) WithPayload(payload string) *GetVsVipPortLaddrNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get vs vip port laddr not found response
func (o *GetVsVipPortLaddrNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVsVipPortLaddrNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
