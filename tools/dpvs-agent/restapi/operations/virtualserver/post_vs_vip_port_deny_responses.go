// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// PostVsVipPortDenyOKCode is the HTTP code returned for type PostVsVipPortDenyOK
const PostVsVipPortDenyOKCode int = 200

/*
PostVsVipPortDenyOK Success

swagger:response postVsVipPortDenyOK
*/
type PostVsVipPortDenyOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostVsVipPortDenyOK creates PostVsVipPortDenyOK with default headers values
func NewPostVsVipPortDenyOK() *PostVsVipPortDenyOK {

	return &PostVsVipPortDenyOK{}
}

// WithPayload adds the payload to the post vs vip port deny o k response
func (o *PostVsVipPortDenyOK) WithPayload(payload string) *PostVsVipPortDenyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port deny o k response
func (o *PostVsVipPortDenyOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortDenyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortDenyCreatedCode is the HTTP code returned for type PostVsVipPortDenyCreated
const PostVsVipPortDenyCreatedCode int = 201

/*
PostVsVipPortDenyCreated Created

swagger:response postVsVipPortDenyCreated
*/
type PostVsVipPortDenyCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostVsVipPortDenyCreated creates PostVsVipPortDenyCreated with default headers values
func NewPostVsVipPortDenyCreated() *PostVsVipPortDenyCreated {

	return &PostVsVipPortDenyCreated{}
}

// WithPayload adds the payload to the post vs vip port deny created response
func (o *PostVsVipPortDenyCreated) WithPayload(payload string) *PostVsVipPortDenyCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port deny created response
func (o *PostVsVipPortDenyCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortDenyCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortDenyInvalidFrontendCode is the HTTP code returned for type PostVsVipPortDenyInvalidFrontend
const PostVsVipPortDenyInvalidFrontendCode int = 460

/*
PostVsVipPortDenyInvalidFrontend Invalid frontend in service configuration

swagger:response postVsVipPortDenyInvalidFrontend
*/
type PostVsVipPortDenyInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortDenyInvalidFrontend creates PostVsVipPortDenyInvalidFrontend with default headers values
func NewPostVsVipPortDenyInvalidFrontend() *PostVsVipPortDenyInvalidFrontend {

	return &PostVsVipPortDenyInvalidFrontend{}
}

// WithPayload adds the payload to the post vs vip port deny invalid frontend response
func (o *PostVsVipPortDenyInvalidFrontend) WithPayload(payload models.Error) *PostVsVipPortDenyInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port deny invalid frontend response
func (o *PostVsVipPortDenyInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortDenyInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortDenyInvalidBackendCode is the HTTP code returned for type PostVsVipPortDenyInvalidBackend
const PostVsVipPortDenyInvalidBackendCode int = 461

/*
PostVsVipPortDenyInvalidBackend Invalid backend in service configuration

swagger:response postVsVipPortDenyInvalidBackend
*/
type PostVsVipPortDenyInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortDenyInvalidBackend creates PostVsVipPortDenyInvalidBackend with default headers values
func NewPostVsVipPortDenyInvalidBackend() *PostVsVipPortDenyInvalidBackend {

	return &PostVsVipPortDenyInvalidBackend{}
}

// WithPayload adds the payload to the post vs vip port deny invalid backend response
func (o *PostVsVipPortDenyInvalidBackend) WithPayload(payload models.Error) *PostVsVipPortDenyInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port deny invalid backend response
func (o *PostVsVipPortDenyInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortDenyInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortDenyFailureCode is the HTTP code returned for type PostVsVipPortDenyFailure
const PostVsVipPortDenyFailureCode int = 500

/*
PostVsVipPortDenyFailure Service deletion failed

swagger:response postVsVipPortDenyFailure
*/
type PostVsVipPortDenyFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortDenyFailure creates PostVsVipPortDenyFailure with default headers values
func NewPostVsVipPortDenyFailure() *PostVsVipPortDenyFailure {

	return &PostVsVipPortDenyFailure{}
}

// WithPayload adds the payload to the post vs vip port deny failure response
func (o *PostVsVipPortDenyFailure) WithPayload(payload models.Error) *PostVsVipPortDenyFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port deny failure response
func (o *PostVsVipPortDenyFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortDenyFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
