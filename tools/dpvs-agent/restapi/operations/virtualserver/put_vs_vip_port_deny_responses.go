// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// PutVsVipPortDenyOKCode is the HTTP code returned for type PutVsVipPortDenyOK
const PutVsVipPortDenyOKCode int = 200

/*
PutVsVipPortDenyOK Success

swagger:response putVsVipPortDenyOK
*/
type PutVsVipPortDenyOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortDenyOK creates PutVsVipPortDenyOK with default headers values
func NewPutVsVipPortDenyOK() *PutVsVipPortDenyOK {

	return &PutVsVipPortDenyOK{}
}

// WithPayload adds the payload to the put vs vip port deny o k response
func (o *PutVsVipPortDenyOK) WithPayload(payload string) *PutVsVipPortDenyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port deny o k response
func (o *PutVsVipPortDenyOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortDenyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortDenyCreatedCode is the HTTP code returned for type PutVsVipPortDenyCreated
const PutVsVipPortDenyCreatedCode int = 201

/*
PutVsVipPortDenyCreated Created

swagger:response putVsVipPortDenyCreated
*/
type PutVsVipPortDenyCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortDenyCreated creates PutVsVipPortDenyCreated with default headers values
func NewPutVsVipPortDenyCreated() *PutVsVipPortDenyCreated {

	return &PutVsVipPortDenyCreated{}
}

// WithPayload adds the payload to the put vs vip port deny created response
func (o *PutVsVipPortDenyCreated) WithPayload(payload string) *PutVsVipPortDenyCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port deny created response
func (o *PutVsVipPortDenyCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortDenyCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortDenyInvalidFrontendCode is the HTTP code returned for type PutVsVipPortDenyInvalidFrontend
const PutVsVipPortDenyInvalidFrontendCode int = 460

/*
PutVsVipPortDenyInvalidFrontend Invalid frontend in service configuration

swagger:response putVsVipPortDenyInvalidFrontend
*/
type PutVsVipPortDenyInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortDenyInvalidFrontend creates PutVsVipPortDenyInvalidFrontend with default headers values
func NewPutVsVipPortDenyInvalidFrontend() *PutVsVipPortDenyInvalidFrontend {

	return &PutVsVipPortDenyInvalidFrontend{}
}

// WithPayload adds the payload to the put vs vip port deny invalid frontend response
func (o *PutVsVipPortDenyInvalidFrontend) WithPayload(payload models.Error) *PutVsVipPortDenyInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port deny invalid frontend response
func (o *PutVsVipPortDenyInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortDenyInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortDenyInvalidBackendCode is the HTTP code returned for type PutVsVipPortDenyInvalidBackend
const PutVsVipPortDenyInvalidBackendCode int = 461

/*
PutVsVipPortDenyInvalidBackend Invalid backend in service configuration

swagger:response putVsVipPortDenyInvalidBackend
*/
type PutVsVipPortDenyInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortDenyInvalidBackend creates PutVsVipPortDenyInvalidBackend with default headers values
func NewPutVsVipPortDenyInvalidBackend() *PutVsVipPortDenyInvalidBackend {

	return &PutVsVipPortDenyInvalidBackend{}
}

// WithPayload adds the payload to the put vs vip port deny invalid backend response
func (o *PutVsVipPortDenyInvalidBackend) WithPayload(payload models.Error) *PutVsVipPortDenyInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port deny invalid backend response
func (o *PutVsVipPortDenyInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortDenyInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortDenyFailureCode is the HTTP code returned for type PutVsVipPortDenyFailure
const PutVsVipPortDenyFailureCode int = 500

/*
PutVsVipPortDenyFailure Service deletion failed

swagger:response putVsVipPortDenyFailure
*/
type PutVsVipPortDenyFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortDenyFailure creates PutVsVipPortDenyFailure with default headers values
func NewPutVsVipPortDenyFailure() *PutVsVipPortDenyFailure {

	return &PutVsVipPortDenyFailure{}
}

// WithPayload adds the payload to the put vs vip port deny failure response
func (o *PutVsVipPortDenyFailure) WithPayload(payload models.Error) *PutVsVipPortDenyFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port deny failure response
func (o *PutVsVipPortDenyFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortDenyFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
