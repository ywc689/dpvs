// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// PostVsVipPortAllowOKCode is the HTTP code returned for type PostVsVipPortAllowOK
const PostVsVipPortAllowOKCode int = 200

/*
PostVsVipPortAllowOK Success

swagger:response postVsVipPortAllowOK
*/
type PostVsVipPortAllowOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostVsVipPortAllowOK creates PostVsVipPortAllowOK with default headers values
func NewPostVsVipPortAllowOK() *PostVsVipPortAllowOK {

	return &PostVsVipPortAllowOK{}
}

// WithPayload adds the payload to the post vs vip port allow o k response
func (o *PostVsVipPortAllowOK) WithPayload(payload string) *PostVsVipPortAllowOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port allow o k response
func (o *PostVsVipPortAllowOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortAllowOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortAllowCreatedCode is the HTTP code returned for type PostVsVipPortAllowCreated
const PostVsVipPortAllowCreatedCode int = 201

/*
PostVsVipPortAllowCreated Created

swagger:response postVsVipPortAllowCreated
*/
type PostVsVipPortAllowCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostVsVipPortAllowCreated creates PostVsVipPortAllowCreated with default headers values
func NewPostVsVipPortAllowCreated() *PostVsVipPortAllowCreated {

	return &PostVsVipPortAllowCreated{}
}

// WithPayload adds the payload to the post vs vip port allow created response
func (o *PostVsVipPortAllowCreated) WithPayload(payload string) *PostVsVipPortAllowCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port allow created response
func (o *PostVsVipPortAllowCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortAllowCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortAllowInvalidFrontendCode is the HTTP code returned for type PostVsVipPortAllowInvalidFrontend
const PostVsVipPortAllowInvalidFrontendCode int = 460

/*
PostVsVipPortAllowInvalidFrontend Invalid frontend in service configuration

swagger:response postVsVipPortAllowInvalidFrontend
*/
type PostVsVipPortAllowInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortAllowInvalidFrontend creates PostVsVipPortAllowInvalidFrontend with default headers values
func NewPostVsVipPortAllowInvalidFrontend() *PostVsVipPortAllowInvalidFrontend {

	return &PostVsVipPortAllowInvalidFrontend{}
}

// WithPayload adds the payload to the post vs vip port allow invalid frontend response
func (o *PostVsVipPortAllowInvalidFrontend) WithPayload(payload models.Error) *PostVsVipPortAllowInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port allow invalid frontend response
func (o *PostVsVipPortAllowInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortAllowInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortAllowInvalidBackendCode is the HTTP code returned for type PostVsVipPortAllowInvalidBackend
const PostVsVipPortAllowInvalidBackendCode int = 461

/*
PostVsVipPortAllowInvalidBackend Invalid backend in service configuration

swagger:response postVsVipPortAllowInvalidBackend
*/
type PostVsVipPortAllowInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortAllowInvalidBackend creates PostVsVipPortAllowInvalidBackend with default headers values
func NewPostVsVipPortAllowInvalidBackend() *PostVsVipPortAllowInvalidBackend {

	return &PostVsVipPortAllowInvalidBackend{}
}

// WithPayload adds the payload to the post vs vip port allow invalid backend response
func (o *PostVsVipPortAllowInvalidBackend) WithPayload(payload models.Error) *PostVsVipPortAllowInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port allow invalid backend response
func (o *PostVsVipPortAllowInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortAllowInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortAllowFailureCode is the HTTP code returned for type PostVsVipPortAllowFailure
const PostVsVipPortAllowFailureCode int = 500

/*
PostVsVipPortAllowFailure Service deletion failed

swagger:response postVsVipPortAllowFailure
*/
type PostVsVipPortAllowFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortAllowFailure creates PostVsVipPortAllowFailure with default headers values
func NewPostVsVipPortAllowFailure() *PostVsVipPortAllowFailure {

	return &PostVsVipPortAllowFailure{}
}

// WithPayload adds the payload to the post vs vip port allow failure response
func (o *PostVsVipPortAllowFailure) WithPayload(payload models.Error) *PostVsVipPortAllowFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port allow failure response
func (o *PostVsVipPortAllowFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortAllowFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
