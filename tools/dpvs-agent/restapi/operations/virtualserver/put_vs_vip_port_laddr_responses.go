// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// PutVsVipPortLaddrOKCode is the HTTP code returned for type PutVsVipPortLaddrOK
const PutVsVipPortLaddrOKCode int = 200

/*
PutVsVipPortLaddrOK Success

swagger:response putVsVipPortLaddrOK
*/
type PutVsVipPortLaddrOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortLaddrOK creates PutVsVipPortLaddrOK with default headers values
func NewPutVsVipPortLaddrOK() *PutVsVipPortLaddrOK {

	return &PutVsVipPortLaddrOK{}
}

// WithPayload adds the payload to the put vs vip port laddr o k response
func (o *PutVsVipPortLaddrOK) WithPayload(payload string) *PutVsVipPortLaddrOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port laddr o k response
func (o *PutVsVipPortLaddrOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortLaddrOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortLaddrCreatedCode is the HTTP code returned for type PutVsVipPortLaddrCreated
const PutVsVipPortLaddrCreatedCode int = 201

/*
PutVsVipPortLaddrCreated Created

swagger:response putVsVipPortLaddrCreated
*/
type PutVsVipPortLaddrCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortLaddrCreated creates PutVsVipPortLaddrCreated with default headers values
func NewPutVsVipPortLaddrCreated() *PutVsVipPortLaddrCreated {

	return &PutVsVipPortLaddrCreated{}
}

// WithPayload adds the payload to the put vs vip port laddr created response
func (o *PutVsVipPortLaddrCreated) WithPayload(payload string) *PutVsVipPortLaddrCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port laddr created response
func (o *PutVsVipPortLaddrCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortLaddrCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortLaddrInvalidFrontendCode is the HTTP code returned for type PutVsVipPortLaddrInvalidFrontend
const PutVsVipPortLaddrInvalidFrontendCode int = 460

/*
PutVsVipPortLaddrInvalidFrontend Invalid frontend in service configuration

swagger:response putVsVipPortLaddrInvalidFrontend
*/
type PutVsVipPortLaddrInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortLaddrInvalidFrontend creates PutVsVipPortLaddrInvalidFrontend with default headers values
func NewPutVsVipPortLaddrInvalidFrontend() *PutVsVipPortLaddrInvalidFrontend {

	return &PutVsVipPortLaddrInvalidFrontend{}
}

// WithPayload adds the payload to the put vs vip port laddr invalid frontend response
func (o *PutVsVipPortLaddrInvalidFrontend) WithPayload(payload models.Error) *PutVsVipPortLaddrInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port laddr invalid frontend response
func (o *PutVsVipPortLaddrInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortLaddrInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortLaddrInvalidBackendCode is the HTTP code returned for type PutVsVipPortLaddrInvalidBackend
const PutVsVipPortLaddrInvalidBackendCode int = 461

/*
PutVsVipPortLaddrInvalidBackend Invalid backend in service configuration

swagger:response putVsVipPortLaddrInvalidBackend
*/
type PutVsVipPortLaddrInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortLaddrInvalidBackend creates PutVsVipPortLaddrInvalidBackend with default headers values
func NewPutVsVipPortLaddrInvalidBackend() *PutVsVipPortLaddrInvalidBackend {

	return &PutVsVipPortLaddrInvalidBackend{}
}

// WithPayload adds the payload to the put vs vip port laddr invalid backend response
func (o *PutVsVipPortLaddrInvalidBackend) WithPayload(payload models.Error) *PutVsVipPortLaddrInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port laddr invalid backend response
func (o *PutVsVipPortLaddrInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortLaddrInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortLaddrFailureCode is the HTTP code returned for type PutVsVipPortLaddrFailure
const PutVsVipPortLaddrFailureCode int = 500

/*
PutVsVipPortLaddrFailure Error while creating virtual server

swagger:response putVsVipPortLaddrFailure
*/
type PutVsVipPortLaddrFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortLaddrFailure creates PutVsVipPortLaddrFailure with default headers values
func NewPutVsVipPortLaddrFailure() *PutVsVipPortLaddrFailure {

	return &PutVsVipPortLaddrFailure{}
}

// WithPayload adds the payload to the put vs vip port laddr failure response
func (o *PutVsVipPortLaddrFailure) WithPayload(payload models.Error) *PutVsVipPortLaddrFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port laddr failure response
func (o *PutVsVipPortLaddrFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortLaddrFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
