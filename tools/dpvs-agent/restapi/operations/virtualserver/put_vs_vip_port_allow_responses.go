// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// PutVsVipPortAllowOKCode is the HTTP code returned for type PutVsVipPortAllowOK
const PutVsVipPortAllowOKCode int = 200

/*
PutVsVipPortAllowOK Success

swagger:response putVsVipPortAllowOK
*/
type PutVsVipPortAllowOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortAllowOK creates PutVsVipPortAllowOK with default headers values
func NewPutVsVipPortAllowOK() *PutVsVipPortAllowOK {

	return &PutVsVipPortAllowOK{}
}

// WithPayload adds the payload to the put vs vip port allow o k response
func (o *PutVsVipPortAllowOK) WithPayload(payload string) *PutVsVipPortAllowOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port allow o k response
func (o *PutVsVipPortAllowOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortAllowOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortAllowCreatedCode is the HTTP code returned for type PutVsVipPortAllowCreated
const PutVsVipPortAllowCreatedCode int = 201

/*
PutVsVipPortAllowCreated Created

swagger:response putVsVipPortAllowCreated
*/
type PutVsVipPortAllowCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortAllowCreated creates PutVsVipPortAllowCreated with default headers values
func NewPutVsVipPortAllowCreated() *PutVsVipPortAllowCreated {

	return &PutVsVipPortAllowCreated{}
}

// WithPayload adds the payload to the put vs vip port allow created response
func (o *PutVsVipPortAllowCreated) WithPayload(payload string) *PutVsVipPortAllowCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port allow created response
func (o *PutVsVipPortAllowCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortAllowCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortAllowInvalidFrontendCode is the HTTP code returned for type PutVsVipPortAllowInvalidFrontend
const PutVsVipPortAllowInvalidFrontendCode int = 460

/*
PutVsVipPortAllowInvalidFrontend Invalid frontend in service configuration

swagger:response putVsVipPortAllowInvalidFrontend
*/
type PutVsVipPortAllowInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortAllowInvalidFrontend creates PutVsVipPortAllowInvalidFrontend with default headers values
func NewPutVsVipPortAllowInvalidFrontend() *PutVsVipPortAllowInvalidFrontend {

	return &PutVsVipPortAllowInvalidFrontend{}
}

// WithPayload adds the payload to the put vs vip port allow invalid frontend response
func (o *PutVsVipPortAllowInvalidFrontend) WithPayload(payload models.Error) *PutVsVipPortAllowInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port allow invalid frontend response
func (o *PutVsVipPortAllowInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortAllowInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortAllowInvalidBackendCode is the HTTP code returned for type PutVsVipPortAllowInvalidBackend
const PutVsVipPortAllowInvalidBackendCode int = 461

/*
PutVsVipPortAllowInvalidBackend Invalid backend in service configuration

swagger:response putVsVipPortAllowInvalidBackend
*/
type PutVsVipPortAllowInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortAllowInvalidBackend creates PutVsVipPortAllowInvalidBackend with default headers values
func NewPutVsVipPortAllowInvalidBackend() *PutVsVipPortAllowInvalidBackend {

	return &PutVsVipPortAllowInvalidBackend{}
}

// WithPayload adds the payload to the put vs vip port allow invalid backend response
func (o *PutVsVipPortAllowInvalidBackend) WithPayload(payload models.Error) *PutVsVipPortAllowInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port allow invalid backend response
func (o *PutVsVipPortAllowInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortAllowInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortAllowFailureCode is the HTTP code returned for type PutVsVipPortAllowFailure
const PutVsVipPortAllowFailureCode int = 500

/*
PutVsVipPortAllowFailure Service deletion failed

swagger:response putVsVipPortAllowFailure
*/
type PutVsVipPortAllowFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortAllowFailure creates PutVsVipPortAllowFailure with default headers values
func NewPutVsVipPortAllowFailure() *PutVsVipPortAllowFailure {

	return &PutVsVipPortAllowFailure{}
}

// WithPayload adds the payload to the put vs vip port allow failure response
func (o *PutVsVipPortAllowFailure) WithPayload(payload models.Error) *PutVsVipPortAllowFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port allow failure response
func (o *PutVsVipPortAllowFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortAllowFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
