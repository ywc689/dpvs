// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// DeleteVsVipPortAllowOKCode is the HTTP code returned for type DeleteVsVipPortAllowOK
const DeleteVsVipPortAllowOKCode int = 200

/*
DeleteVsVipPortAllowOK Success

swagger:response deleteVsVipPortAllowOK
*/
type DeleteVsVipPortAllowOK struct {
}

// NewDeleteVsVipPortAllowOK creates DeleteVsVipPortAllowOK with default headers values
func NewDeleteVsVipPortAllowOK() *DeleteVsVipPortAllowOK {

	return &DeleteVsVipPortAllowOK{}
}

// WriteResponse to the client
func (o *DeleteVsVipPortAllowOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteVsVipPortAllowNotFoundCode is the HTTP code returned for type DeleteVsVipPortAllowNotFound
const DeleteVsVipPortAllowNotFoundCode int = 404

/*
DeleteVsVipPortAllowNotFound Service not found

swagger:response deleteVsVipPortAllowNotFound
*/
type DeleteVsVipPortAllowNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteVsVipPortAllowNotFound creates DeleteVsVipPortAllowNotFound with default headers values
func NewDeleteVsVipPortAllowNotFound() *DeleteVsVipPortAllowNotFound {

	return &DeleteVsVipPortAllowNotFound{}
}

// WithPayload adds the payload to the delete vs vip port allow not found response
func (o *DeleteVsVipPortAllowNotFound) WithPayload(payload string) *DeleteVsVipPortAllowNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port allow not found response
func (o *DeleteVsVipPortAllowNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortAllowNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortAllowInvalidFrontendCode is the HTTP code returned for type DeleteVsVipPortAllowInvalidFrontend
const DeleteVsVipPortAllowInvalidFrontendCode int = 460

/*
DeleteVsVipPortAllowInvalidFrontend Invalid frontend in service configuration

swagger:response deleteVsVipPortAllowInvalidFrontend
*/
type DeleteVsVipPortAllowInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortAllowInvalidFrontend creates DeleteVsVipPortAllowInvalidFrontend with default headers values
func NewDeleteVsVipPortAllowInvalidFrontend() *DeleteVsVipPortAllowInvalidFrontend {

	return &DeleteVsVipPortAllowInvalidFrontend{}
}

// WithPayload adds the payload to the delete vs vip port allow invalid frontend response
func (o *DeleteVsVipPortAllowInvalidFrontend) WithPayload(payload models.Error) *DeleteVsVipPortAllowInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port allow invalid frontend response
func (o *DeleteVsVipPortAllowInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortAllowInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortAllowInvalidBackendCode is the HTTP code returned for type DeleteVsVipPortAllowInvalidBackend
const DeleteVsVipPortAllowInvalidBackendCode int = 461

/*
DeleteVsVipPortAllowInvalidBackend Invalid backend in service configuration

swagger:response deleteVsVipPortAllowInvalidBackend
*/
type DeleteVsVipPortAllowInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortAllowInvalidBackend creates DeleteVsVipPortAllowInvalidBackend with default headers values
func NewDeleteVsVipPortAllowInvalidBackend() *DeleteVsVipPortAllowInvalidBackend {

	return &DeleteVsVipPortAllowInvalidBackend{}
}

// WithPayload adds the payload to the delete vs vip port allow invalid backend response
func (o *DeleteVsVipPortAllowInvalidBackend) WithPayload(payload models.Error) *DeleteVsVipPortAllowInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port allow invalid backend response
func (o *DeleteVsVipPortAllowInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortAllowInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteVsVipPortAllowFailureCode is the HTTP code returned for type DeleteVsVipPortAllowFailure
const DeleteVsVipPortAllowFailureCode int = 500

/*
DeleteVsVipPortAllowFailure Service deletion failed

swagger:response deleteVsVipPortAllowFailure
*/
type DeleteVsVipPortAllowFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewDeleteVsVipPortAllowFailure creates DeleteVsVipPortAllowFailure with default headers values
func NewDeleteVsVipPortAllowFailure() *DeleteVsVipPortAllowFailure {

	return &DeleteVsVipPortAllowFailure{}
}

// WithPayload adds the payload to the delete vs vip port allow failure response
func (o *DeleteVsVipPortAllowFailure) WithPayload(payload models.Error) *DeleteVsVipPortAllowFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vs vip port allow failure response
func (o *DeleteVsVipPortAllowFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVsVipPortAllowFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
