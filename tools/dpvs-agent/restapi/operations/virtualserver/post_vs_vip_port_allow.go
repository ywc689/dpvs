// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostVsVipPortAllowHandlerFunc turns a function with the right signature into a post vs vip port allow handler
type PostVsVipPortAllowHandlerFunc func(PostVsVipPortAllowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostVsVipPortAllowHandlerFunc) Handle(params PostVsVipPortAllowParams) middleware.Responder {
	return fn(params)
}

// PostVsVipPortAllowHandler interface for that can handle valid post vs vip port allow params
type PostVsVipPortAllowHandler interface {
	Handle(PostVsVipPortAllowParams) middleware.Responder
}

// NewPostVsVipPortAllow creates a new http.Handler for the post vs vip port allow operation
func NewPostVsVipPortAllow(ctx *middleware.Context, handler PostVsVipPortAllowHandler) *PostVsVipPortAllow {
	return &PostVsVipPortAllow{Context: ctx, Handler: handler}
}

/*
	PostVsVipPortAllow swagger:route POST /vs/{VipPort}/allow virtualserver postVsVipPortAllow

Update a fully white ip list to vip:port:proto
*/
type PostVsVipPortAllow struct {
	Context *middleware.Context
	Handler PostVsVipPortAllowHandler
}

func (o *PostVsVipPortAllow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostVsVipPortAllowParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
