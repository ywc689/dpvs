// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// PutVsVipPortRsOKCode is the HTTP code returned for type PutVsVipPortRsOK
const PutVsVipPortRsOKCode int = 200

/*
PutVsVipPortRsOK Success

swagger:response putVsVipPortRsOK
*/
type PutVsVipPortRsOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortRsOK creates PutVsVipPortRsOK with default headers values
func NewPutVsVipPortRsOK() *PutVsVipPortRsOK {

	return &PutVsVipPortRsOK{}
}

// WithPayload adds the payload to the put vs vip port rs o k response
func (o *PutVsVipPortRsOK) WithPayload(payload string) *PutVsVipPortRsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port rs o k response
func (o *PutVsVipPortRsOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortRsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortRsCreatedCode is the HTTP code returned for type PutVsVipPortRsCreated
const PutVsVipPortRsCreatedCode int = 201

/*
PutVsVipPortRsCreated Created

swagger:response putVsVipPortRsCreated
*/
type PutVsVipPortRsCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortRsCreated creates PutVsVipPortRsCreated with default headers values
func NewPutVsVipPortRsCreated() *PutVsVipPortRsCreated {

	return &PutVsVipPortRsCreated{}
}

// WithPayload adds the payload to the put vs vip port rs created response
func (o *PutVsVipPortRsCreated) WithPayload(payload string) *PutVsVipPortRsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port rs created response
func (o *PutVsVipPortRsCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortRsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortRsInvalidFrontendCode is the HTTP code returned for type PutVsVipPortRsInvalidFrontend
const PutVsVipPortRsInvalidFrontendCode int = 460

/*
PutVsVipPortRsInvalidFrontend Invalid frontend in service configuration

swagger:response putVsVipPortRsInvalidFrontend
*/
type PutVsVipPortRsInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortRsInvalidFrontend creates PutVsVipPortRsInvalidFrontend with default headers values
func NewPutVsVipPortRsInvalidFrontend() *PutVsVipPortRsInvalidFrontend {

	return &PutVsVipPortRsInvalidFrontend{}
}

// WithPayload adds the payload to the put vs vip port rs invalid frontend response
func (o *PutVsVipPortRsInvalidFrontend) WithPayload(payload models.Error) *PutVsVipPortRsInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port rs invalid frontend response
func (o *PutVsVipPortRsInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortRsInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortRsInvalidBackendCode is the HTTP code returned for type PutVsVipPortRsInvalidBackend
const PutVsVipPortRsInvalidBackendCode int = 461

/*
PutVsVipPortRsInvalidBackend Invalid backend in service configuration

swagger:response putVsVipPortRsInvalidBackend
*/
type PutVsVipPortRsInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortRsInvalidBackend creates PutVsVipPortRsInvalidBackend with default headers values
func NewPutVsVipPortRsInvalidBackend() *PutVsVipPortRsInvalidBackend {

	return &PutVsVipPortRsInvalidBackend{}
}

// WithPayload adds the payload to the put vs vip port rs invalid backend response
func (o *PutVsVipPortRsInvalidBackend) WithPayload(payload models.Error) *PutVsVipPortRsInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port rs invalid backend response
func (o *PutVsVipPortRsInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortRsInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortRsFailureCode is the HTTP code returned for type PutVsVipPortRsFailure
const PutVsVipPortRsFailureCode int = 500

/*
PutVsVipPortRsFailure Service deletion failed

swagger:response putVsVipPortRsFailure
*/
type PutVsVipPortRsFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortRsFailure creates PutVsVipPortRsFailure with default headers values
func NewPutVsVipPortRsFailure() *PutVsVipPortRsFailure {

	return &PutVsVipPortRsFailure{}
}

// WithPayload adds the payload to the put vs vip port rs failure response
func (o *PutVsVipPortRsFailure) WithPayload(payload models.Error) *PutVsVipPortRsFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port rs failure response
func (o *PutVsVipPortRsFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortRsFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
