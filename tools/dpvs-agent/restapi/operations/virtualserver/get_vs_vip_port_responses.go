// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// GetVsVipPortOKCode is the HTTP code returned for type GetVsVipPortOK
const GetVsVipPortOKCode int = 200

/*
GetVsVipPortOK Success

swagger:response getVsVipPortOK
*/
type GetVsVipPortOK struct {

	/*
	  In: Body
	*/
	Payload *models.VirtualServerList `json:"body,omitempty"`
}

// NewGetVsVipPortOK creates GetVsVipPortOK with default headers values
func NewGetVsVipPortOK() *GetVsVipPortOK {

	return &GetVsVipPortOK{}
}

// WithPayload adds the payload to the get vs vip port o k response
func (o *GetVsVipPortOK) WithPayload(payload *models.VirtualServerList) *GetVsVipPortOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get vs vip port o k response
func (o *GetVsVipPortOK) SetPayload(payload *models.VirtualServerList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVsVipPortOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVsVipPortNotFoundCode is the HTTP code returned for type GetVsVipPortNotFound
const GetVsVipPortNotFoundCode int = 404

/*
GetVsVipPortNotFound Service not found

swagger:response getVsVipPortNotFound
*/
type GetVsVipPortNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetVsVipPortNotFound creates GetVsVipPortNotFound with default headers values
func NewGetVsVipPortNotFound() *GetVsVipPortNotFound {

	return &GetVsVipPortNotFound{}
}

// WithPayload adds the payload to the get vs vip port not found response
func (o *GetVsVipPortNotFound) WithPayload(payload string) *GetVsVipPortNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get vs vip port not found response
func (o *GetVsVipPortNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVsVipPortNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
