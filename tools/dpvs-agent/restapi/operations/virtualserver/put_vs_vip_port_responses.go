// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// PutVsVipPortOKCode is the HTTP code returned for type PutVsVipPortOK
const PutVsVipPortOKCode int = 200

/*
PutVsVipPortOK Updated

swagger:response putVsVipPortOK
*/
type PutVsVipPortOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortOK creates PutVsVipPortOK with default headers values
func NewPutVsVipPortOK() *PutVsVipPortOK {

	return &PutVsVipPortOK{}
}

// WithPayload adds the payload to the put vs vip port o k response
func (o *PutVsVipPortOK) WithPayload(payload string) *PutVsVipPortOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port o k response
func (o *PutVsVipPortOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortCreatedCode is the HTTP code returned for type PutVsVipPortCreated
const PutVsVipPortCreatedCode int = 201

/*
PutVsVipPortCreated Created

swagger:response putVsVipPortCreated
*/
type PutVsVipPortCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutVsVipPortCreated creates PutVsVipPortCreated with default headers values
func NewPutVsVipPortCreated() *PutVsVipPortCreated {

	return &PutVsVipPortCreated{}
}

// WithPayload adds the payload to the put vs vip port created response
func (o *PutVsVipPortCreated) WithPayload(payload string) *PutVsVipPortCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port created response
func (o *PutVsVipPortCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortInvalidFrontendCode is the HTTP code returned for type PutVsVipPortInvalidFrontend
const PutVsVipPortInvalidFrontendCode int = 460

/*
PutVsVipPortInvalidFrontend Invalid frontend in service configuration

swagger:response putVsVipPortInvalidFrontend
*/
type PutVsVipPortInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortInvalidFrontend creates PutVsVipPortInvalidFrontend with default headers values
func NewPutVsVipPortInvalidFrontend() *PutVsVipPortInvalidFrontend {

	return &PutVsVipPortInvalidFrontend{}
}

// WithPayload adds the payload to the put vs vip port invalid frontend response
func (o *PutVsVipPortInvalidFrontend) WithPayload(payload models.Error) *PutVsVipPortInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port invalid frontend response
func (o *PutVsVipPortInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortInvalidBackendCode is the HTTP code returned for type PutVsVipPortInvalidBackend
const PutVsVipPortInvalidBackendCode int = 461

/*
PutVsVipPortInvalidBackend Invalid backend in service configuration

swagger:response putVsVipPortInvalidBackend
*/
type PutVsVipPortInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortInvalidBackend creates PutVsVipPortInvalidBackend with default headers values
func NewPutVsVipPortInvalidBackend() *PutVsVipPortInvalidBackend {

	return &PutVsVipPortInvalidBackend{}
}

// WithPayload adds the payload to the put vs vip port invalid backend response
func (o *PutVsVipPortInvalidBackend) WithPayload(payload models.Error) *PutVsVipPortInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port invalid backend response
func (o *PutVsVipPortInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutVsVipPortFailureCode is the HTTP code returned for type PutVsVipPortFailure
const PutVsVipPortFailureCode int = 500

/*
PutVsVipPortFailure Error while creating virtual server

swagger:response putVsVipPortFailure
*/
type PutVsVipPortFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPutVsVipPortFailure creates PutVsVipPortFailure with default headers values
func NewPutVsVipPortFailure() *PutVsVipPortFailure {

	return &PutVsVipPortFailure{}
}

// WithPayload adds the payload to the put vs vip port failure response
func (o *PutVsVipPortFailure) WithPayload(payload models.Error) *PutVsVipPortFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put vs vip port failure response
func (o *PutVsVipPortFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutVsVipPortFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
