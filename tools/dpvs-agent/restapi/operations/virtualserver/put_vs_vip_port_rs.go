// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutVsVipPortRsHandlerFunc turns a function with the right signature into a put vs vip port rs handler
type PutVsVipPortRsHandlerFunc func(PutVsVipPortRsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutVsVipPortRsHandlerFunc) Handle(params PutVsVipPortRsParams) middleware.Responder {
	return fn(params)
}

// PutVsVipPortRsHandler interface for that can handle valid put vs vip port rs params
type PutVsVipPortRsHandler interface {
	Handle(PutVsVipPortRsParams) middleware.Responder
}

// NewPutVsVipPortRs creates a new http.Handler for the put vs vip port rs operation
func NewPutVsVipPortRs(ctx *middleware.Context, handler PutVsVipPortRsHandler) *PutVsVipPortRs {
	return &PutVsVipPortRs{Context: ctx, Handler: handler}
}

/*
	PutVsVipPortRs swagger:route PUT /vs/{VipPort}/rs virtualserver putVsVipPortRs

Add a set of real server to vip:port:proto
*/
type PutVsVipPortRs struct {
	Context *middleware.Context
	Handler PutVsVipPortRsHandler
}

func (o *PutVsVipPortRs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutVsVipPortRsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
