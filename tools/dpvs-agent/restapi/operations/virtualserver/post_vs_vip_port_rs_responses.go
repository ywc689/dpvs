// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// PostVsVipPortRsOKCode is the HTTP code returned for type PostVsVipPortRsOK
const PostVsVipPortRsOKCode int = 200

/*
PostVsVipPortRsOK Success

swagger:response postVsVipPortRsOK
*/
type PostVsVipPortRsOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostVsVipPortRsOK creates PostVsVipPortRsOK with default headers values
func NewPostVsVipPortRsOK() *PostVsVipPortRsOK {

	return &PostVsVipPortRsOK{}
}

// WithPayload adds the payload to the post vs vip port rs o k response
func (o *PostVsVipPortRsOK) WithPayload(payload string) *PostVsVipPortRsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port rs o k response
func (o *PostVsVipPortRsOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortRsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortRsCreatedCode is the HTTP code returned for type PostVsVipPortRsCreated
const PostVsVipPortRsCreatedCode int = 201

/*
PostVsVipPortRsCreated Created

swagger:response postVsVipPortRsCreated
*/
type PostVsVipPortRsCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostVsVipPortRsCreated creates PostVsVipPortRsCreated with default headers values
func NewPostVsVipPortRsCreated() *PostVsVipPortRsCreated {

	return &PostVsVipPortRsCreated{}
}

// WithPayload adds the payload to the post vs vip port rs created response
func (o *PostVsVipPortRsCreated) WithPayload(payload string) *PostVsVipPortRsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port rs created response
func (o *PostVsVipPortRsCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortRsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortRsInvalidFrontendCode is the HTTP code returned for type PostVsVipPortRsInvalidFrontend
const PostVsVipPortRsInvalidFrontendCode int = 460

/*
PostVsVipPortRsInvalidFrontend Invalid frontend in service configuration

swagger:response postVsVipPortRsInvalidFrontend
*/
type PostVsVipPortRsInvalidFrontend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortRsInvalidFrontend creates PostVsVipPortRsInvalidFrontend with default headers values
func NewPostVsVipPortRsInvalidFrontend() *PostVsVipPortRsInvalidFrontend {

	return &PostVsVipPortRsInvalidFrontend{}
}

// WithPayload adds the payload to the post vs vip port rs invalid frontend response
func (o *PostVsVipPortRsInvalidFrontend) WithPayload(payload models.Error) *PostVsVipPortRsInvalidFrontend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port rs invalid frontend response
func (o *PostVsVipPortRsInvalidFrontend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortRsInvalidFrontend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(460)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortRsInvalidBackendCode is the HTTP code returned for type PostVsVipPortRsInvalidBackend
const PostVsVipPortRsInvalidBackendCode int = 461

/*
PostVsVipPortRsInvalidBackend Invalid backend in service configuration

swagger:response postVsVipPortRsInvalidBackend
*/
type PostVsVipPortRsInvalidBackend struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortRsInvalidBackend creates PostVsVipPortRsInvalidBackend with default headers values
func NewPostVsVipPortRsInvalidBackend() *PostVsVipPortRsInvalidBackend {

	return &PostVsVipPortRsInvalidBackend{}
}

// WithPayload adds the payload to the post vs vip port rs invalid backend response
func (o *PostVsVipPortRsInvalidBackend) WithPayload(payload models.Error) *PostVsVipPortRsInvalidBackend {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port rs invalid backend response
func (o *PostVsVipPortRsInvalidBackend) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortRsInvalidBackend) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(461)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostVsVipPortRsFailureCode is the HTTP code returned for type PostVsVipPortRsFailure
const PostVsVipPortRsFailureCode int = 500

/*
PostVsVipPortRsFailure Service deletion failed

swagger:response postVsVipPortRsFailure
*/
type PostVsVipPortRsFailure struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostVsVipPortRsFailure creates PostVsVipPortRsFailure with default headers values
func NewPostVsVipPortRsFailure() *PostVsVipPortRsFailure {

	return &PostVsVipPortRsFailure{}
}

// WithPayload adds the payload to the post vs vip port rs failure response
func (o *PostVsVipPortRsFailure) WithPayload(payload models.Error) *PostVsVipPortRsFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post vs vip port rs failure response
func (o *PostVsVipPortRsFailure) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVsVipPortRsFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
