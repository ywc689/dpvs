// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDeviceNameNicHandlerFunc turns a function with the right signature into a get device name nic handler
type GetDeviceNameNicHandlerFunc func(GetDeviceNameNicParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDeviceNameNicHandlerFunc) Handle(params GetDeviceNameNicParams) middleware.Responder {
	return fn(params)
}

// GetDeviceNameNicHandler interface for that can handle valid get device name nic params
type GetDeviceNameNicHandler interface {
	Handle(GetDeviceNameNicParams) middleware.Responder
}

// NewGetDeviceNameNic creates a new http.Handler for the get device name nic operation
func NewGetDeviceNameNic(ctx *middleware.Context, handler GetDeviceNameNicHandler) *GetDeviceNameNic {
	return &GetDeviceNameNic{Context: ctx, Handler: handler}
}

/*
	GetDeviceNameNic swagger:route GET /device/{name}/nic device getDeviceNameNic

dpip link show ${nic-name} -s -v
*/
type GetDeviceNameNic struct {
	Context *middleware.Context
	Handler GetDeviceNameNicHandler
}

func (o *GetDeviceNameNic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDeviceNameNicParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
