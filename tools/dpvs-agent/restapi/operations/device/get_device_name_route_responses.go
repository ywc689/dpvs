// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetDeviceNameRouteOKCode is the HTTP code returned for type GetDeviceNameRouteOK
const GetDeviceNameRouteOKCode int = 200

/*
GetDeviceNameRouteOK Success

swagger:response getDeviceNameRouteOK
*/
type GetDeviceNameRouteOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDeviceNameRouteOK creates GetDeviceNameRouteOK with default headers values
func NewGetDeviceNameRouteOK() *GetDeviceNameRouteOK {

	return &GetDeviceNameRouteOK{}
}

// WithPayload adds the payload to the get device name route o k response
func (o *GetDeviceNameRouteOK) WithPayload(payload string) *GetDeviceNameRouteOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device name route o k response
func (o *GetDeviceNameRouteOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceNameRouteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetDeviceNameRouteNotFoundCode is the HTTP code returned for type GetDeviceNameRouteNotFound
const GetDeviceNameRouteNotFoundCode int = 404

/*
GetDeviceNameRouteNotFound Not Found

swagger:response getDeviceNameRouteNotFound
*/
type GetDeviceNameRouteNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDeviceNameRouteNotFound creates GetDeviceNameRouteNotFound with default headers values
func NewGetDeviceNameRouteNotFound() *GetDeviceNameRouteNotFound {

	return &GetDeviceNameRouteNotFound{}
}

// WithPayload adds the payload to the get device name route not found response
func (o *GetDeviceNameRouteNotFound) WithPayload(payload string) *GetDeviceNameRouteNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device name route not found response
func (o *GetDeviceNameRouteNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceNameRouteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
