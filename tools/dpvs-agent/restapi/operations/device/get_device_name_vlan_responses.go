// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetDeviceNameVlanOKCode is the HTTP code returned for type GetDeviceNameVlanOK
const GetDeviceNameVlanOKCode int = 200

/*
GetDeviceNameVlanOK Success

swagger:response getDeviceNameVlanOK
*/
type GetDeviceNameVlanOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDeviceNameVlanOK creates GetDeviceNameVlanOK with default headers values
func NewGetDeviceNameVlanOK() *GetDeviceNameVlanOK {

	return &GetDeviceNameVlanOK{}
}

// WithPayload adds the payload to the get device name vlan o k response
func (o *GetDeviceNameVlanOK) WithPayload(payload string) *GetDeviceNameVlanOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device name vlan o k response
func (o *GetDeviceNameVlanOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceNameVlanOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetDeviceNameVlanNotFoundCode is the HTTP code returned for type GetDeviceNameVlanNotFound
const GetDeviceNameVlanNotFoundCode int = 404

/*
GetDeviceNameVlanNotFound Not Found

swagger:response getDeviceNameVlanNotFound
*/
type GetDeviceNameVlanNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDeviceNameVlanNotFound creates GetDeviceNameVlanNotFound with default headers values
func NewGetDeviceNameVlanNotFound() *GetDeviceNameVlanNotFound {

	return &GetDeviceNameVlanNotFound{}
}

// WithPayload adds the payload to the get device name vlan not found response
func (o *GetDeviceNameVlanNotFound) WithPayload(payload string) *GetDeviceNameVlanNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device name vlan not found response
func (o *GetDeviceNameVlanNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceNameVlanNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
