// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutDeviceNameNicHandlerFunc turns a function with the right signature into a put device name nic handler
type PutDeviceNameNicHandlerFunc func(PutDeviceNameNicParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutDeviceNameNicHandlerFunc) Handle(params PutDeviceNameNicParams) middleware.Responder {
	return fn(params)
}

// PutDeviceNameNicHandler interface for that can handle valid put device name nic params
type PutDeviceNameNicHandler interface {
	Handle(PutDeviceNameNicParams) middleware.Responder
}

// NewPutDeviceNameNic creates a new http.Handler for the put device name nic operation
func NewPutDeviceNameNic(ctx *middleware.Context, handler PutDeviceNameNicHandler) *PutDeviceNameNic {
	return &PutDeviceNameNic{Context: ctx, Handler: handler}
}

/*
	PutDeviceNameNic swagger:route PUT /device/{name}/nic device putDeviceNameNic

dpip link set ${nic-name} [forward2kni,link,promisc,tc-ingress,tc-egress] [on/up,off/down]
*/
type PutDeviceNameNic struct {
	Context *middleware.Context
	Handler PutDeviceNameNicHandler
}

func (o *PutDeviceNameNic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutDeviceNameNicParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
