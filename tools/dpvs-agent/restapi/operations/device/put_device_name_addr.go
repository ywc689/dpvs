// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutDeviceNameAddrHandlerFunc turns a function with the right signature into a put device name addr handler
type PutDeviceNameAddrHandlerFunc func(PutDeviceNameAddrParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutDeviceNameAddrHandlerFunc) Handle(params PutDeviceNameAddrParams) middleware.Responder {
	return fn(params)
}

// PutDeviceNameAddrHandler interface for that can handle valid put device name addr params
type PutDeviceNameAddrHandler interface {
	Handle(PutDeviceNameAddrParams) middleware.Responder
}

// NewPutDeviceNameAddr creates a new http.Handler for the put device name addr operation
func NewPutDeviceNameAddr(ctx *middleware.Context, handler PutDeviceNameAddrHandler) *PutDeviceNameAddr {
	return &PutDeviceNameAddr{Context: ctx, Handler: handler}
}

/*
	PutDeviceNameAddr swagger:route PUT /device/{name}/addr device putDeviceNameAddr

add/update special net device ip addr
*/
type PutDeviceNameAddr struct {
	Context *middleware.Context
	Handler PutDeviceNameAddrHandler
}

func (o *PutDeviceNameAddr) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutDeviceNameAddrParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
