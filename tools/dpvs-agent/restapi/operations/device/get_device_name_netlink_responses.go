// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetDeviceNameNetlinkOKCode is the HTTP code returned for type GetDeviceNameNetlinkOK
const GetDeviceNameNetlinkOKCode int = 200

/*
GetDeviceNameNetlinkOK Success

swagger:response getDeviceNameNetlinkOK
*/
type GetDeviceNameNetlinkOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDeviceNameNetlinkOK creates GetDeviceNameNetlinkOK with default headers values
func NewGetDeviceNameNetlinkOK() *GetDeviceNameNetlinkOK {

	return &GetDeviceNameNetlinkOK{}
}

// WithPayload adds the payload to the get device name netlink o k response
func (o *GetDeviceNameNetlinkOK) WithPayload(payload string) *GetDeviceNameNetlinkOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device name netlink o k response
func (o *GetDeviceNameNetlinkOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceNameNetlinkOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetDeviceNameNetlinkNotFoundCode is the HTTP code returned for type GetDeviceNameNetlinkNotFound
const GetDeviceNameNetlinkNotFoundCode int = 404

/*
GetDeviceNameNetlinkNotFound Not Found

swagger:response getDeviceNameNetlinkNotFound
*/
type GetDeviceNameNetlinkNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDeviceNameNetlinkNotFound creates GetDeviceNameNetlinkNotFound with default headers values
func NewGetDeviceNameNetlinkNotFound() *GetDeviceNameNetlinkNotFound {

	return &GetDeviceNameNetlinkNotFound{}
}

// WithPayload adds the payload to the get device name netlink not found response
func (o *GetDeviceNameNetlinkNotFound) WithPayload(payload string) *GetDeviceNameNetlinkNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get device name netlink not found response
func (o *GetDeviceNameNetlinkNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDeviceNameNetlinkNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
