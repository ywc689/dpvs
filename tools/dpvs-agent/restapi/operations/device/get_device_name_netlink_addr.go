// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDeviceNameNetlinkAddrHandlerFunc turns a function with the right signature into a get device name netlink addr handler
type GetDeviceNameNetlinkAddrHandlerFunc func(GetDeviceNameNetlinkAddrParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDeviceNameNetlinkAddrHandlerFunc) Handle(params GetDeviceNameNetlinkAddrParams) middleware.Responder {
	return fn(params)
}

// GetDeviceNameNetlinkAddrHandler interface for that can handle valid get device name netlink addr params
type GetDeviceNameNetlinkAddrHandler interface {
	Handle(GetDeviceNameNetlinkAddrParams) middleware.Responder
}

// NewGetDeviceNameNetlinkAddr creates a new http.Handler for the get device name netlink addr operation
func NewGetDeviceNameNetlinkAddr(ctx *middleware.Context, handler GetDeviceNameNetlinkAddrHandler) *GetDeviceNameNetlinkAddr {
	return &GetDeviceNameNetlinkAddr{Context: ctx, Handler: handler}
}

/*
	GetDeviceNameNetlinkAddr swagger:route GET /device/{name}/netlink/addr device getDeviceNameNetlinkAddr

ip addr show lo: Display special linux net device addr detail
*/
type GetDeviceNameNetlinkAddr struct {
	Context *middleware.Context
	Handler GetDeviceNameNetlinkAddrHandler
}

func (o *GetDeviceNameNetlinkAddr) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDeviceNameNetlinkAddrParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
